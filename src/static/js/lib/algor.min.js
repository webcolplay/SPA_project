(function() {
    var hexcase = 0;
    var b64pad = "=";
    var chrsz = 8;
    window.algor = window.algor || {};
    window.algor.hex_sha1 = function(s) {
        return binb2hex(core_sha1(str2binb(s), s.length * chrsz))
    };
    window.algor.b64_sha1 = function(s) {
        return binb2b64(core_sha1(str2binb(s), s.length * chrsz))
    };
    window.algor.str_sha1 = function(s) {
        return binb2str(core_sha1(str2binb(s), s.length * chrsz))
    };
    window.algor.hex_hmac_sha1 = function(key, data) {
        return binb2hex(core_hmac_sha1(key, data))
    };
    window.algor.b64_hmac_sha1 = function(key, data) {
        return binb2b64(core_hmac_sha1(key, data))
    };
    window.algor.str_hmac_sha1 = function(key, data) {
        return binb2str(core_hmac_sha1(key, data))
    };
    window.algor.base64encode = function(data) {
        return base64encode(data)
    };
    window.algor.base64decode = function(data) {
        return base64decode(data)
    };

    function sha1_vm_test() {
        return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d"
    }

    function core_sha1(x, len) {
        x[len >> 5] |= 128 << (24 - len % 32);
        x[((len + 64 >> 9) << 4) + 15] = len;
        var w = Array(80);
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        var e = -1009589776;
        for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            var olde = e;
            for (var j = 0; j < 80; j++) {
                if (j < 16) {
                    w[j] = x[i + j]
                } else {
                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1)
                }
                var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
                e = d;
                d = c;
                c = rol(b, 30);
                b = a;
                a = t
            }
            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
            e = safe_add(e, olde)
        }
        return Array(a, b, c, d, e)
    }

    function sha1_ft(t, b, c, d) {
        if (t < 20) {
            return (b & c) | ((~b) & d)
        }
        if (t < 40) {
            return b ^ c ^ d
        }
        if (t < 60) {
            return (b & c) | (b & d) | (c & d)
        }
        return b ^ c ^ d
    }

    function sha1_kt(t) {
        return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : (t < 60) ? -1894007588 : -899497514
    }

    function core_hmac_sha1(key, data) {
        var bkey = str2binb(key);
        if (bkey.length > 16) {
            bkey = core_sha1(bkey, key.length * chrsz)
        }
        var ipad = Array(16),
            opad = Array(16);
        for (var i = 0; i < 16; i++) {
            ipad[i] = bkey[i] ^ 909522486;
            opad[i] = bkey[i] ^ 1549556828
        }
        var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);
        return core_sha1(opad.concat(hash), 512 + 160)
    }

    function safe_add(x, y) {
        var lsw = (x & 65535) + (y & 65535);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 65535)
    }

    function rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt))
    }

    function str2binb(str) {
        var bin = Array();
        var mask = (1 << chrsz) - 1;
        for (var i = 0; i < str.length * chrsz; i += chrsz) {
            bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i % 32)
        }
        return bin
    }

    function binb2str(bin) {
        var str = "";
        var mask = (1 << chrsz) - 1;
        for (var i = 0; i < bin.length * 32; i += chrsz) {
            str += String.fromCharCode((bin[i >> 5] >>> (32 - chrsz - i % 32)) & mask)
        }
        return str
    }

    function binb2hex(binarray) {
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var str = "";
        for (var i = 0; i < binarray.length * 4; i++) {
            str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 15) + hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 15)
        }
        return str
    }
    var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    function binb2b64(binarray) {
        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var str = "";
        for (var i = 0; i < binarray.length * 4; i += 3) {
            var triplet = (((binarray[i >> 2] >> 8 * (3 - i % 4)) & 255) << 16) | (((binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4)) & 255) << 8) | ((binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4)) & 255);
            for (var j = 0; j < 4; j++) {
                if (i * 8 + j * 6 > binarray.length * 32) {
                    str += b64pad
                } else {
                    str += tab.charAt((triplet >> 6 * (3 - j)) & 63)
                }
            }
        }
        return str
    }
})();
var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

function base64encode(str) {
    var out, i, len;
    var c1, c2, c3;
    len = str.length;
    i = 0;
    out = "";
    while (i < len) {
        c1 = str.charCodeAt(i++) & 255;
        if (i == len) {
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt((c1 & 3) << 4);
            out += "==";
            break
        }
        c2 = str.charCodeAt(i++);
        if (i == len) {
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt(((c1 & 3) << 4) | ((c2 & 240) >> 4));
            out += base64EncodeChars.charAt((c2 & 15) << 2);
            out += "=";
            break
        }
        c3 = str.charCodeAt(i++);
        out += base64EncodeChars.charAt(c1 >> 2);
        out += base64EncodeChars.charAt(((c1 & 3) << 4) | ((c2 & 240) >> 4));
        out += base64EncodeChars.charAt(((c2 & 15) << 2) | ((c3 & 192) >> 6));
        out += base64EncodeChars.charAt(c3 & 63)
    }
    return out
}

function base64decode(str) {
    var c1, c2, c3, c4;
    var i, len, out;
    len = str.length;
    i = 0;
    out = "";
    while (i < len) {
        do {
            c1 = base64DecodeChars[str.charCodeAt(i++) & 255]
        } while (i < len && c1 == -1);
        if (c1 == -1) {
            break
        }
        do {
            c2 = base64DecodeChars[str.charCodeAt(i++) & 255]
        } while (i < len && c2 == -1);
        if (c2 == -1) {
            break
        }
        out += String.fromCharCode((c1 << 2) | ((c2 & 48) >> 4));
        do {
            c3 = str.charCodeAt(i++) & 255;
            if (c3 == 61) {
                return out
            }
            c3 = base64DecodeChars[c3]
        } while (i < len && c3 == -1);
        if (c3 == -1) {
            break
        }
        out += String.fromCharCode(((c2 & 15) << 4) | ((c3 & 60) >> 2));
        do {
            c4 = str.charCodeAt(i++) & 255;
            if (c4 == 61) {
                return out
            }
            c4 = base64DecodeChars[c4]
        } while (i < len && c4 == -1);
        if (c4 == -1) {
            break
        }
        out += String.fromCharCode(((c3 & 3) << 6) | c4)
    }
    return out
}

function utf16to8(str) {
    var out, i, len, c;
    out = "";
    len = str.length;
    for (i = 0; i < len; i++) {
        c = str.charCodeAt(i);
        if ((c >= 1) && (c <= 127)) {
            out += str.charAt(i)
        } else {
            if (c > 2047) {
                out += String.fromCharCode(224 | ((c >> 12) & 15));
                out += String.fromCharCode(128 | ((c >> 6) & 63));
                out += String.fromCharCode(128 | ((c >> 0) & 63))
            } else {
                out += String.fromCharCode(192 | ((c >> 6) & 31));
                out += String.fromCharCode(128 | ((c >> 0) & 63))
            }
        }
    }
    return out
}

function utf8to16(str) {
    var out, i, len, c;
    var char2, char3;
    out = "";
    len = str.length;
    i = 0;
    while (i < len) {
        c = str.charCodeAt(i++);
        switch (c >> 4) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                out += str.charAt(i - 1);
                break;
            case 12:
            case 13:
                char2 = str.charCodeAt(i++);
                out += String.fromCharCode(((c & 31) << 6) | (char2 & 63));
                break;
            case 14:
                char2 = str.charCodeAt(i++);
                char3 = str.charCodeAt(i++);
                out += String.fromCharCode(((c & 15) << 12) | ((char2 & 63) << 6) | ((char3 & 63) << 0));
                break
        }
    }
    return out
}

function CharToHex(str) {
    var out, i, len, c, h;
    out = "";
    len = str.length;
    i = 0;
    while (i < len) {
        c = str.charCodeAt(i++);
        h = c.toString(16);
        if (h.length < 2) {
            h = "0" + h
        }
        out += "\\x" + h + " ";
        if (i > 0 && i % 8 == 0) {
            out += "\r\n"
        }
    }
    return out
}(function() {
    var rotateLeft = function(lValue, iShiftBits) {
        return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits))
    };
    var addUnsigned = function(lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = (lX & 2147483648);
        lY8 = (lY & 2147483648);
        lX4 = (lX & 1073741824);
        lY4 = (lY & 1073741824);
        lResult = (lX & 1073741823) + (lY & 1073741823);
        if (lX4 & lY4) {
            return (lResult ^ 2147483648 ^ lX8 ^ lY8)
        }
        if (lX4 | lY4) {
            if (lResult & 1073741824) {
                return (lResult ^ 3221225472 ^ lX8 ^ lY8)
            } else {
                return (lResult ^ 1073741824 ^ lX8 ^ lY8)
            }
        } else {
            return (lResult ^ lX8 ^ lY8)
        }
    };
    var F = function(x, y, z) {
        return (x & y) | ((~x) & z)
    };
    var G = function(x, y, z) {
        return (x & z) | (y & (~z))
    };
    var H = function(x, y, z) {
        return (x ^ y ^ z)
    };
    var I = function(x, y, z) {
        return (y ^ (x | (~z)))
    };
    var FF = function(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(F(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b)
    };
    var GG = function(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(G(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b)
    };
    var HH = function(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(H(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b)
    };
    var II = function(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(I(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b)
    };
    var convertToWordArray = function(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWordsTempOne = lMessageLength + 8;
        var lNumberOfWordsTempTwo = (lNumberOfWordsTempOne - (lNumberOfWordsTempOne % 64)) / 64;
        var lNumberOfWords = (lNumberOfWordsTempTwo + 1) * 16;
        var lWordArray = Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while (lByteCount < lMessageLength) {
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
            lByteCount++
        }
        lWordCount = (lByteCount - (lByteCount % 4)) / 4;
        lBytePosition = (lByteCount % 4) * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (128 << lBytePosition);
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray
    };
    var wordToHex = function(lValue) {
        var WordToHexValue = "",
            WordToHexValueTemp = "",
            lByte, lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
            lByte = (lValue >>> (lCount * 8)) & 255;
            WordToHexValueTemp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValueTemp.substr(WordToHexValueTemp.length - 2, 2)
        }
        return WordToHexValue
    };
    var uTF8Encode = function(string) {
        string = string.replace(/\x0d\x0a/g, "\x0a");
        var output = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                output += String.fromCharCode(c)
            } else {
                if ((c > 127) && (c < 2048)) {
                    output += String.fromCharCode((c >> 6) | 192);
                    output += String.fromCharCode((c & 63) | 128)
                } else {
                    output += String.fromCharCode((c >> 12) | 224);
                    output += String.fromCharCode(((c >> 6) & 63) | 128);
                    output += String.fromCharCode((c & 63) | 128)
                }
            }
        }
        return output
    };
    window.algor.md5 = function(string) {
        var x = Array();
        var k, AA, BB, CC, DD, a, b, c, d;
        var S11 = 7,
            S12 = 12,
            S13 = 17,
            S14 = 22;
        var S21 = 5,
            S22 = 9,
            S23 = 14,
            S24 = 20;
        var S31 = 4,
            S32 = 11,
            S33 = 16,
            S34 = 23;
        var S41 = 6,
            S42 = 10,
            S43 = 15,
            S44 = 21;
        string = uTF8Encode(string);
        x = convertToWordArray(string);
        a = 1732584193;
        b = 4023233417;
        c = 2562383102;
        d = 271733878;
        for (k = 0; k < x.length; k += 16) {
            AA = a;
            BB = b;
            CC = c;
            DD = d;
            a = FF(a, b, c, d, x[k + 0], S11, 3614090360);
            d = FF(d, a, b, c, x[k + 1], S12, 3905402710);
            c = FF(c, d, a, b, x[k + 2], S13, 606105819);
            b = FF(b, c, d, a, x[k + 3], S14, 3250441966);
            a = FF(a, b, c, d, x[k + 4], S11, 4118548399);
            d = FF(d, a, b, c, x[k + 5], S12, 1200080426);
            c = FF(c, d, a, b, x[k + 6], S13, 2821735955);
            b = FF(b, c, d, a, x[k + 7], S14, 4249261313);
            a = FF(a, b, c, d, x[k + 8], S11, 1770035416);
            d = FF(d, a, b, c, x[k + 9], S12, 2336552879);
            c = FF(c, d, a, b, x[k + 10], S13, 4294925233);
            b = FF(b, c, d, a, x[k + 11], S14, 2304563134);
            a = FF(a, b, c, d, x[k + 12], S11, 1804603682);
            d = FF(d, a, b, c, x[k + 13], S12, 4254626195);
            c = FF(c, d, a, b, x[k + 14], S13, 2792965006);
            b = FF(b, c, d, a, x[k + 15], S14, 1236535329);
            a = GG(a, b, c, d, x[k + 1], S21, 4129170786);
            d = GG(d, a, b, c, x[k + 6], S22, 3225465664);
            c = GG(c, d, a, b, x[k + 11], S23, 643717713);
            b = GG(b, c, d, a, x[k + 0], S24, 3921069994);
            a = GG(a, b, c, d, x[k + 5], S21, 3593408605);
            d = GG(d, a, b, c, x[k + 10], S22, 38016083);
            c = GG(c, d, a, b, x[k + 15], S23, 3634488961);
            b = GG(b, c, d, a, x[k + 4], S24, 3889429448);
            a = GG(a, b, c, d, x[k + 9], S21, 568446438);
            d = GG(d, a, b, c, x[k + 14], S22, 3275163606);
            c = GG(c, d, a, b, x[k + 3], S23, 4107603335);
            b = GG(b, c, d, a, x[k + 8], S24, 1163531501);
            a = GG(a, b, c, d, x[k + 13], S21, 2850285829);
            d = GG(d, a, b, c, x[k + 2], S22, 4243563512);
            c = GG(c, d, a, b, x[k + 7], S23, 1735328473);
            b = GG(b, c, d, a, x[k + 12], S24, 2368359562);
            a = HH(a, b, c, d, x[k + 5], S31, 4294588738);
            d = HH(d, a, b, c, x[k + 8], S32, 2272392833);
            c = HH(c, d, a, b, x[k + 11], S33, 1839030562);
            b = HH(b, c, d, a, x[k + 14], S34, 4259657740);
            a = HH(a, b, c, d, x[k + 1], S31, 2763975236);
            d = HH(d, a, b, c, x[k + 4], S32, 1272893353);
            c = HH(c, d, a, b, x[k + 7], S33, 4139469664);
            b = HH(b, c, d, a, x[k + 10], S34, 3200236656);
            a = HH(a, b, c, d, x[k + 13], S31, 681279174);
            d = HH(d, a, b, c, x[k + 0], S32, 3936430074);
            c = HH(c, d, a, b, x[k + 3], S33, 3572445317);
            b = HH(b, c, d, a, x[k + 6], S34, 76029189);
            a = HH(a, b, c, d, x[k + 9], S31, 3654602809);
            d = HH(d, a, b, c, x[k + 12], S32, 3873151461);
            c = HH(c, d, a, b, x[k + 15], S33, 530742520);
            b = HH(b, c, d, a, x[k + 2], S34, 3299628645);
            a = II(a, b, c, d, x[k + 0], S41, 4096336452);
            d = II(d, a, b, c, x[k + 7], S42, 1126891415);
            c = II(c, d, a, b, x[k + 14], S43, 2878612391);
            b = II(b, c, d, a, x[k + 5], S44, 4237533241);
            a = II(a, b, c, d, x[k + 12], S41, 1700485571);
            d = II(d, a, b, c, x[k + 3], S42, 2399980690);
            c = II(c, d, a, b, x[k + 10], S43, 4293915773);
            b = II(b, c, d, a, x[k + 1], S44, 2240044497);
            a = II(a, b, c, d, x[k + 8], S41, 1873313359);
            d = II(d, a, b, c, x[k + 15], S42, 4264355552);
            c = II(c, d, a, b, x[k + 6], S43, 2734768916);
            b = II(b, c, d, a, x[k + 13], S44, 1309151649);
            a = II(a, b, c, d, x[k + 4], S41, 4149444226);
            d = II(d, a, b, c, x[k + 11], S42, 3174756917);
            c = II(c, d, a, b, x[k + 2], S43, 718787259);
            b = II(b, c, d, a, x[k + 9], S44, 3951481745);
            a = addUnsigned(a, AA);
            b = addUnsigned(b, BB);
            c = addUnsigned(c, CC);
            d = addUnsigned(d, DD)
        }
        var tempValue = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);
        return tempValue.toLowerCase()
    }
})();
var __json = null;
if (typeof JSON !== "undefined") {
    __json = JSON
}
var JSON = {
    org: "http://www.JSON.org",
    copyright: "(c)2005 JSON.org",
    license: "http://www.crockford.com/JSON/license.html",
    stringify: function stringify(arg) {
        var c, i, l, s = "",
            v;
        switch (typeof arg) {
            case "object":
                if (arg) {
                    if (arg.constructor == Array) {
                        for (i = 0; i < arg.length; ++i) {
                            v = this.stringify(arg[i]);
                            if (s) {
                                s += ","
                            }
                            s += v
                        }
                        return "[" + s + "]"
                    } else {
                        if (typeof arg.toString != "undefined") {
                            for (i in arg) {
                                v = arg[i];
                                if (typeof v != "undefined" && typeof v != "function") {
                                    v = this.stringify(v);
                                    if (s) {
                                        s += ","
                                    }
                                    s += this.stringify(i) + ":" + v
                                }
                            }
                            return "{" + s + "}"
                        }
                    }
                }
                return "null";
            case "number":
                return isFinite(arg) ? String(arg) : "null";
            case "string":
                l = arg.length;
                s = '"';
                for (i = 0; i < l; i += 1) {
                    c = arg.charAt(i);
                    if (c >= " ") {
                        if (c == "\\" || c == '"') {
                            s += "\\"
                        }
                        s += c
                    } else {
                        switch (c) {
                            case "\b":
                                s += "\\b";
                                break;
                            case "\f":
                                s += "\\f";
                                break;
                            case "\n":
                                s += "\\n";
                                break;
                            case "\r":
                                s += "\\r";
                                break;
                            case "\t":
                                s += "\\t";
                                break;
                            default:
                                c = c.charCodeAt();
                                s += "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
                        }
                    }
                }
                return s + '"';
            case "boolean":
                return String(arg);
            default:
                return "null"
        }
    },
    parse: function(text) {
        var at = 0;
        var ch = " ";

        function error(m) {
            throw {
                name: "JSONError",
                message: m,
                at: at - 1,
                text: text
            }
        }

        function next() {
            ch = text.charAt(at);
            at += 1;
            return ch
        }

        function white() {
            while (ch) {
                if (ch <= " ") {
                    next()
                } else {
                    if (ch == "/") {
                        switch (next()) {
                            case "/":
                                while (next() && ch != "\n" && ch != "\r") {}
                                break;
                            case "*":
                                next();
                                for (;;) {
                                    if (ch) {
                                        if (ch == "*") {
                                            if (next() == "/") {
                                                next();
                                                break
                                            }
                                        } else {
                                            next()
                                        }
                                    } else {
                                        error("Unterminated comment")
                                    }
                                }
                                break;
                            default:
                                error("Syntax error")
                        }
                    } else {
                        break
                    }
                }
            }
        }

        function string() {
            var i, s = "",
                t, u;
            if (ch == '"') {
                outer: while (next()) {
                    if (ch == '"') {
                        next();
                        return s
                    } else {
                        if (ch == "\\") {
                            switch (next()) {
                                case "b":
                                    s += "\b";
                                    break;
                                case "f":
                                    s += "\f";
                                    break;
                                case "n":
                                    s += "\n";
                                    break;
                                case "r":
                                    s += "\r";
                                    break;
                                case "t":
                                    s += "\t";
                                    break;
                                case "u":
                                    u = 0;
                                    for (i = 0; i < 4; i += 1) {
                                        t = parseInt(next(), 16);
                                        if (!isFinite(t)) {
                                            break outer
                                        }
                                        u = u * 16 + t
                                    }
                                    s += String.fromCharCode(u);
                                    break;
                                default:
                                    s += ch
                            }
                        } else {
                            s += ch
                        }
                    }
                }
            }
            error("Bad string")
        }

        function array() {
            var a = [];
            if (ch == "[") {
                next();
                white();
                if (ch == "]") {
                    next();
                    return a
                }
                while (ch) {
                    a.push(value());
                    white();
                    if (ch == "]") {
                        next();
                        return a
                    } else {
                        if (ch != ",") {
                            break
                        }
                    }
                    next();
                    white()
                }
            }
            error("Bad array")
        }

        function object() {
            var k, o = {};
            var jsonKey = [];
            if (ch == "{") {
                next();
                white();
                if (ch == "}") {
                    next();
                    o["jsonKey"] = jsonKey;
                    return o
                }
                while (ch) {
                    k = string();
                    white();
                    if (ch != ":") {
                        break
                    }
                    next();
                    o[k] = value();
                    jsonKey.push(k);
                    white();
                    if (ch == "}") {
                        next();
                        o["jsonKey"] = jsonKey;
                        return o
                    } else {
                        if (ch != ",") {
                            break
                        }
                    }
                    next();
                    white()
                }
            }
            error("Bad object")
        }

        function number() {
            var n = "",
                v;
            if (ch == "-") {
                n = "-";
                next()
            }
            while (ch >= "0" && ch <= "9") {
                n += ch;
                next()
            }
            if (ch == ".") {
                n += ".";
                while (next() && ch >= "0" && ch <= "9") {
                    n += ch
                }
            }
            if (ch == "e" || ch == "E") {
                n += ch;
                next();
                if (ch == "-" || ch == "+") {
                    n += ch;
                    next()
                }
                while (ch >= "0" && ch <= "9") {
                    n += ch;
                    next()
                }
            }
            v = +n;
            if (!isFinite(v)) {
                error("Bad number")
            } else {
                return v
            }
        }

        function word() {
            switch (ch) {
                case "t":
                    if (next() == "r" && next() == "u" && next() == "e") {
                        next();
                        return true
                    }
                    break;
                case "f":
                    if (next() == "a" && next() == "l" && next() == "s" && next() == "e") {
                        next();
                        return false
                    }
                    break;
                case "n":
                    if (next() == "u" && next() == "l" && next() == "l") {
                        next();
                        return null
                    }
                    break
            }
            error("Syntax error")
        }

        function value() {
            white();
            switch (ch) {
                case "{":
                    return object();
                case "[":
                    return array();
                case '"':
                    return string();
                case "-":
                    return number();
                default:
                    return ch >= "0" && ch <= "9" ? number() : word()
            }
        }
        if (__json !== null) {
            return __json.parse(text)
        }
        return eval("(" + text + ")")
    }
};